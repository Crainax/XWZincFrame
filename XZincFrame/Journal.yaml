简介:
  - 第二版XZincFrame作图框架。
  - 第二版是经由第一版XZincLibrary作图框架优化而来。
  - 优化的主要目的为优化整体框架的架构，通过划分API底层库和业务逻辑库。最终目的为提高聚合，减少耦合。
  - API底层库为只包含最基础的基本API函数接口，业务逻辑库为提供一些有具体功能逻辑等等基于最基本API函数接口扩充而来的功能系统。
  - 作图框架的构想目标为每一副地图的业务逻辑层代码库都可以是不一样的，然后API底层代码库则是通用一样的。通过这种方式可以后续扩展多样化。

架构:
  - API底层:
    - Base 基础库
    - Define 宏定义库
    - JAPI and DzAPI native函数库
    - Table 表库
    - Turn 句柄转换库
    - Order 命令ID映射库
    - Event 事件库
    - Gamer 玩家库
    - Game 游戏库
    - Object 物编对象库
    - Math 数学库
    - Timer 中心计时器库
    - Effect 特效库
    - Point 点/环境判断库
    - Group 单位组库
    - String 字符串处理库
    - Input 按键ID映射库
    - Panel 多面板库
    - Dialog 对话框库
    - Ease 网易游戏平台API函数库
    - Hard 硬件库
    - Frame UI界面框架库
    - Unit 单位库
    - Item 物品库
  - 业务逻辑层:
    - Motion 运动器库
    - Buff Buff系统库
    - Damage 伤害系统库 ， 待定 可以把伤害类型，攻击类型，武器类型映射为整数，通过哈希值来映射出对应的类型。然后再设定0索引为默认常用的类型。
    - Excretion 排泄库 该库的作用为处理单位死亡后和物品捕捉抵押及周期性选取排泄。
    - Attribute 属性库 该库的作用为处理单位捡取和丢弃处理属性及预处理属性。

Debug:
  - Effect:
    - 提供 thisSize 属性来查询当前外部的实例数量。 Effect.thisSize
  - Point:
    - 提供 thisSize 属性来查询当前外部的实例数量。 Point.thisSize
  - Group:
    - 提供 thisSize 属性来查询当前外部的实例数量。 Group.thisSize
  - Unit:
    - 提供 thisSize 属性来查询当前外部的实例数量。 Unit.thisSize
    - 所有实例都是一次性的，并不是绑定到单位句柄里面的，所以每次生成一个实例，在使用完毕之后都是需要使用Null去释放实例。避免泄露实例
  - Item:
    - 提供 thisSize 属性来查询当前外部的实例数量。 Item.thisSize
    - 所有实例都是一次性的，并不是绑定到单位句柄里面的，所以每次生成一个实例，在使用完毕之后都是需要使用Null去释放实例。避免泄露实例

HashTable 'XZHT' 相关:
  - Event:
    - 主索引 '事件映射' 作为玩家单位和玩家属性事件的原生事件名字映射。
    - 主索引 '内核回调' 作为几个固定的条件函数回调，命令事件和发动技能事件。
    - 主索引 '单位事件' 用来单位事件触发器。
    - 主索引 '命令事件' 用来保存命令事件触发器。
    - 主索引 '技能事件' 用来保存技能事件触发器。
    - 主索引 '玩家事件' 用来保存玩家事件触发器。
    - 主索引 '自定义事件' 用来保存自定义事件触发器。
    - 主索引 '自定义事件数据' 用来保存自定义事件触发器绑定数据。
    - 主索引 '同步事件' 用来保存同步事件触发器。
    - 主索引 区域注册事件中的rect句柄值 用来绑定区域注册事件中的触发器和绑定数据。
  - Gamer:
    - 主索引 给玩家句柄绑定特效开关的布尔值。
  - Turn:
    - 主索引 '转换库索引' 作为转换库转换使用。
  - Effect:
    - 主索引 '特效实例' 用来绑定Effect类型实例。
  - Game:
    - 主索引 '可见度修整器实例' 用来绑定Fogmodifier类型实例。
  - Group:
    - 主索引 '单位组实例' 用来绑定实例和绑定布尔表达式。
  - Panel:
    - 主索引 '多面板实例' 用来绑定实例。
  - Dialog:
    - 主索引 '对话框实例' 用来绑定实例。
  - Frame:
    - 主索引 'UI框架事件映射' 用来注册事件ID。
    - 主索引 'UI框架实例' 用来绑定实例。
  - Unit:
    - 主索引 给单位句柄绑定属性值[实数][整数]和判断技能CD的时间[实数]
    - 主索引 给单位句柄绑定属性值[基础属性-XX]和[结算属性-XX] 类型为实数。基础属性取代了GetHeroXX
    - 主索引 '单位附加值' 内绑定实数类型的附加值
  - Item:
    - 主索引 给物品句柄和物品类型绑定属性值[实数][整数]
  - Buff:
    - 主索引 给单位句柄绑定眩晕时间，减防数值，减防时间，减防状态
  - Damage:
    - 主索引 给单位句柄绑定事件过滤器布尔值

# 2020年1月16日
API底层相关:
  - Base:
    - 原版移植过来，并且增加全局哈希表 XWHT 。
  - Define:
    - 原版移植过来。
  - JAPI and DzAPI:
    - 原版移植过来。
  - Event:
    - 重构完毕，Table移除完毕。已经改为 HashTable 哈希表 。

# 2020年1月19日
API底层相关:
  - Base:
    - 新增加XZHT哈希表，该表的作用为框架底层内所需要用到的传参表。
  - Event:
    - 删除自带的ENHT哈希表，把ENHT哈希表改为XZHT哈希表。
  - Gamer:
    - 原版移植过来。

# 2020年1月21日
API底层相关:
  - Table:
    - 原版移植过来。
  - Turn:
    - 原版移植过来，Table移除完毕。已经改为使用全局框架表 XZHT 。
  - Order:
    - 原版移植过来。
  - Math:
    - 原版移植过来。
  - Object:
    - 原版移植过来。
  - Timer:
    - 原版移植过来。
  - Effect:
    - 移除HashTable和Table，采用 XZHT 表来绑定实例。
    - addSpecial函数全部采用数组的形式来进行传参，取消HashTable传参。

# 2020年1月22日
API底层相关:
  - Game:
    - 移除Table，采用 XZHT 表来绑定实例。
    - 修复destroy时并没有对表内数据进行释放的BUG。
  - Point:
    - 移除TerrainPathability库，用Zinc代码重构该库API到Point结构内。作为静态方法。
  - Group:
    - 移除Table，采用 XZHT 表来绑定实例和绑定布尔表达式。
  - String:
    - 取消对Gamer库的依赖，改为用common函数来作为本地玩家判断。
  - Input:
    - 原版移植过来。
  - Panel:
    - 移除Table，采用 XZHT 表来绑定实例。
  - Dialog:
    - 移除Table，采用 XZHT 表来绑定实例。
  - Ease:
    - 原版移植过来。
  - Hard:
    - 原版移植过来。
  - Frame:
    - 移除Table，采用 XZHT 表来绑定实例和绑定事件ID。
  - Base:
    - 优化Lua预处理函数CommandFuncLuaMY中的参数结构，改为Table形式。更加简洁和直观。

# 2020年2月5日
API底层相关:
  - Unit:
    - 移除所有Table相关的，采用 XZHT 表来绑定单位的属性值和判断单位CD的时间表。
    - 移除减防系统和眩晕系统，该两个系统将改到Buff库内。
    - 移除死亡排泄删除属性的触发器功能，该排泄将单独移植到逻辑层当中。
    - 移除万能马甲库 Majia ，该库将移植到Base基础库当中。
    - 移除伤害函数，改为保留原伤害API函数。
  - Item:
    - 移除所有Table相关的，采用 XZHT 表来绑定物品的属性值。
    - 修复delete方法内析构函数引用错误的BUG。
    - 移除预处理属性系统，该系统将移植到逻辑层当中。
    - 移除捡取和丢弃物品给予属性的触发器，该系统将移植到逻辑层当中。
    - 移除周期性选取物品和捕捉抵押物品然后排泄实例的触发器，该系统将移植到逻辑层当中。
逻辑层相关:
  - Excretion:
    - 单位死亡后清空排泄非永久单位绑定的属性值。
    - 捕捉抵押物品和周期性选取地图区域内的物品来排泄释放属性值和实例，还有清除神符类物品。
  - Attribute:
    - 预处理注册物品类型里面描述的属性名和属性值。
    - 单位捡取和丢弃物品，给操作的单位增加或减少相对应的属性值。

# 2020年2月20日
逻辑层相关:
  - Motion:
    - 运动器结构，内附运动器参数结构。
    - 该运动器拥有移动事件，碰撞事件，完成事件。
    - 该运动器能够捕捉到响应单位，碰撞来源。

# 2020年2月21日
逻辑层相关:
  - Buff:
    - 眩晕系统，减防系统。
    - 眩晕系统内附眩晕事件，能够捕捉眩晕单位和眩晕时间。通过Buff.vt.方法来访问眩晕API。
    - 减防系统内附减防事件，能够捕捉减防单位，减防数值，减防时间。通过Buff.ra.方法来访问减防API。
  - Excretion:
    - 为单位死亡排泄增加死亡清空眩晕时间，减防数值，减防时间，减防状态等XZHT框架绑定数据。

# 2020年3月11日
API底层相关:
  - Effect:
    - 给create接口新增加一个判断玩家key开关的功能。
  - Gamer:
    - 增加一个给玩家打开或关闭特效key的接口。
逻辑层相关:
  - Damage:
    - 新增加伤害系统
    - 伤害系统具备伤害开始，伤害计算，伤害结算三种衍生事件
    - 能够捕捉伤害来源，受伤单位，伤害值，伤害类型，攻击方式，能够临时修改伤害实例内本次数据。
    - 支持物理，法术，真实，分裂四种伤害类型。
    - 多达十多种属性参与计算。
  - HurtEffect:
    - 新增加伤害特效显示
    - 内里安放攻击会给单位附加溅血特效。
    - 拥有伤害数字特效

# 2020年3月12日
API底层相关:
  - Gamer:
    - 增加一个成员属性 ht 类型为Table。可以通过 Gamer.user[0].ht.type[index] 的方式去访问。
    - 增加一个成员属性 hero 类型为Unit。 描述为玩家的英雄单位，可以通过 Gamer.user[0].hero 的方式去访问。
    - 增加一个成员属性 pets 类型为Unit。 描述为玩家的宠物单位，可以通过 Gamer.user[0].pets 的方式去访问。
  - Unit:
    - 任何修改百分比力量，敏捷，智力和基础力量，敏捷，智力等行为都会智能计算基础属性和结算属性，并最终直接设置。

# 2020年3月13日
API底层相关:
  - Unit:
    - 增加一个设置移动速度的API。

# 2020年3月14日
API底层相关:
  - Unit:
    - 增加一个布尔值NullBool用来判断是否重复Null的。
逻辑层相关:
  - Motion:
    - 调整了衍生事件参数。
    - 获取响应单位和获取碰撞单位修改为获取运动单位及获取被碰撞单位。
    - 获取的事件单位均为系统内部全局实例，所以不需要手动释放。并且不能够在外部释放，否则会引发不恰当的行为。

# 2020年3月15日
API底层相关:
  - TableDefine:
    - 新增加哈希表宏库。
    - 该库具备储存和读取的宏函数。
    - 通过save(类型, 哈希表, 主索引, 子索引, 值)来访问储存函数。
    - 通过load(类型, 哈希表, 主索引, 子索引)来访问读取函数。
逻辑层相关:
  - Motion:
    - 运动器参数结构新增加四个布尔值参数。
    - vest = 是否需要销毁运动单位。
    - eventMover = 是否启用移动事件。
    - eventColli = 是否启用碰撞事件。
    - eventEnd = 是否启用结束事件。
    - 运动器过滤器单位组调整至public作用域，新增加para[运动器参数结构]到public作用域。
    - 外部传进来的运动器参数结构体会自动进行销毁析构。
    - 在重复判断处增加参数的析构。
    - 在参数结构体内重构destroy函数，在里面判断如果是马甲则是自动析构单位实例。

# 2020年3月16日
逻辑层相关:
  - Motion:
    - 修复运动器坐标冲锋的BUG。
    - 修复冲锋后面向角度的BUG。
    - 新增加一个判断单位是否处于冲锋状态的自定义值。
    - 通过自定义属性里面给单位绑定 索引为 冲锋状态 的值。

# 2020年3月17日
API底层相关:
  - Define:
    - 新增加一批锚点位置宏常量。
  - Event:
    - 修复Event.j事件库内 任意单位离开区域事件 注册错误的BUG。
  - Unit:
    - 在方法flush增加清空全局哈希表XWHT值的排泄。

# 2020年3月18日
API底层相关:
  - Frame:
    - 修复部分Event索引。
    - 新增加getWidth方法和IsShow方法。
    - 修复UI事件注册的BUG，删除掉布尔判断。
逻辑层相关:
  - Damage:
    - 分发代码稍作调整，伤害结算事件回调响应代码取消在计算方法内响应，改为在主回调内最后结算。
    - 新增加一个自定义事件 伤害特效处理 事件，该事件不会过滤任何规则，所有伤害[除分裂]都会执行该事件，该事件顺序在结算后，可以用该事件来做伤害特效回调。
    - 递归崩溃思考:
      - DamageAPI最后一个参数值flag为过滤Event规则，true为过滤Event回调，false为不过滤。
      - 如果选择false不过滤规则，而又想避免在Event回调内造成伤害而不崩溃的话，可以通过if来处理过滤。
      - 通过判断伤害类型等等方式来避免递归崩溃。
      - 在事件回调造成不同伤害类型的伤害逻辑:
        - 伤害结算Event -> 
            - 判断筛选伤害类型为非触发伤害的 ->
                - 计算攻击特效机制 ->
                    - 造成触发伤害;
      - 在事件回调造成相同伤害类型的伤害逻辑:
        - 伤害结算Event ->
          - 判断筛选伤害类型是否为当前造成的伤害类型 ->
            - return;
          - 结束判断
          - 判断通过条件 ->
            - 造成当前伤害类型的伤害;

# 2020年3月19日
API底层相关:
  - Unit:
    - 在setStateString,addStateString,subStateString三个方法内部设置JAPI属性的时候增加0智力来刷新面板。

# 2020年3月20日
API底层相关:
  - Dialog:
    - 修复byHandle会因为哈希表BUG的缘故导致返回错误句柄。
  - Effect:
    - 修复byHandle会因为哈希表BUG的缘故导致返回错误句柄。
  - Frame:
    - 修复byHandle会因为哈希表BUG的缘故导致返回错误句柄。
  - Game:
    - 修复byHandle会因为哈希表BUG的缘故导致返回错误句柄。
  - Group:
    - 修复byHandle会因为哈希表BUG的缘故导致返回错误句柄。
  - Panel:
    - 修复byHandle会因为哈希表BUG的缘故导致返回错误句柄。
逻辑层相关:
  - 移除Attribute属性库注册出逻辑层相关。
  - Attribute该库的顺序代码需要在obj生成之前。所以需要及时调整位置。

# 2020年3月21日
控件相关:
  - Button:
    - 新增加控件相关。
    - 在控件相关内新增加按钮类。
    - 按钮类包含按钮参数结构体。

# 2020年3月25日
API底层相关:
  - Gamer:
    - 新增加一个判断玩家当前特效开关的boolean判断。
  - Base:
    - 调整创建规则矩形的API描述。
  - Event:
    - 修复onUnitAbility和onUnitOrder两个API映射错误导致无法使用的BUG。

# 2020年3月26日
API底层相关:
  - String:
    - 在漂浮文字构造函数那里把参数改为StringPara参数体。
逻辑库相关:
  - Damage:
    - 调整了一下伤害类型和攻击类型的记录顺序，现在在伤害开始事件都能够进行记录。

# 2020年3月30日
API底层相关:
  - Define:
    - 移除Define，该库目前位置调整到宏命令库。
  - TableDefine:
    - 移除TableDefine库，该库的功能优化整合到宏命令库内的Table。
逻辑层相关:
  - Motivo:
    - 移除运动器参数结构体内的Null自动排泄。
    - 该排泄已经是在运动器内实现自动排泄的。
宏命令库:
  - Define:
    - 宏常量和部分宏函数库。
  - Table:
    - 哈希表语法糖和自定义值功能。
地图相关:
  - Attribute:
    - 修复了最后一个物品的属性数量没有注册上的BUG。

# 2020年4月1日
API底层相关:
  - Gamer:
    - 新增加两个API，减少金币和减少木材。
  - Point:
    - 新增加一个判断坐标包含矩形API。
宏命令库:
  - Table:
    - 哈希表的删除，判断，读取，保存和自定义值的表操作新增加对底层库的9个结构体类型支持。

# 2020年4月2日
API底层相关:
  - Gamer:
    - 新增加两个减少人口使用和减少人口上限的API。

# 2020年4月3日
API底层相关:
  - Item:
    - 新增加获取物品使用次数，增加物品使用次数，减少物品使用次数API。
  - TImer:
    - 修改执行间隔取消判断只有循环的才能修改的规则。现在非循环Timer都能够修改。
逻辑层相关:
  - Buff:
    - 重新定义了Buff架构，现在改为bufftype来定义buff类型，buff来管控时间逻辑 bufftype来管控功能逻辑

# 2020年4月4日
API底层相关:
  - Buff:
    - 把Buff库移动到底层库。
    - 完善规则，增加字符串映射。
    - 给BuffType增加唯一性标识符。
逻辑层相关:
  - Buff:
    - 把Buff库从逻辑层移除。

# 2020年4月5日
API底层相关:
  - Buff:
    - 给Buff结构体新增加一个唯一性ID和增加一个获取ID的API。
    - BuffType取消两个ID。
    - 调整了一下析构规则，Buff实例现在析构的话会自动清除删除绑定在实例句柄值的自定义值。

# 2020年4月7日
API底层相关:
  - Math:
    - 新增加一个获取矩形随机坐标的API。

# 2020年4月8日
API底层相关:
  - Unit:
    - 单位属性那里改为获取基础伤害，而不是附加伤害。

# 2020年4月9日
API底层相关:
  - Damage:
    - 增加三个整数参数类型的本次伤害值API。

# 2020年4月17日
API底层相关:
  - Timer:
    - 增加一个HandleIdAPI来获取唯一性ID。

# 2020年4月21日
逻辑层相关:
  - Damage:
    - 修复了实例没有析构的BUG。

# 2020年4月24日
API底层相关:
  - Vec3:
    - 新增加三维向量库。
  - Hard:
    - 新增加返回鼠标的向量信息。
    - 新增加游戏坐标转换屏幕坐标[局限于游戏UI的中心位置偏移XY，异步调用]。
  - Unit:
    - 新增加返回单位的向量信息。
  - Frame:
    - 新增加一个固定往游戏UI的中心位置偏移设置锚点的API。

# 2020年4月27日
API底层相关:
  - Item:
    - 新增加JAPI修改和获取物品类型的字符串信息。